@use 'sass:meta';
@use 'sass:map';
@use '00-base/variables';
@use '00-base/mixins/color';
@import '00-base/variables'; // Needs to import twice; font/typography don't support @use.
@import '00-base/mixins/font';
@import '00-base/mixins/typography';
@import '00-base/mixins/map';
@import '00-base/mixins/string';

html {
  $colors: map.deep-merge(variables.$ct-colors-default, variables.$ct-colors);
  $colors: map.deep-merge($colors, variables.$ct-colors-brands);

  @each $theme, $colors in $colors {
    @each $name, $value in $colors {
      --#{ct-string(ct-join-lists(('ct', 'color', $theme, $name), '-'))}: #{$value};
    }
  }

  $typography: map.merge($ct-typography-default, $ct-typography);

  @each $name, $ruleset in $typography {
    // Ruleset is a list of rules - extract rules.
    @if type-of($ruleset) == list {
      $ruleset: _ct-typography-extract-rules($ruleset);

      @include _ct-typography-print-css-variables(0, $name, $ruleset);
    }

    // Ruleset is a full ruleset definition - print all rules with breakpoints.
    @else if type-of($ruleset) == map {
      $breakpoints: map.keys($ruleset);

      @each $breakpoint in $breakpoints {
        $breakpoint-ruleset: _ct-typography-extract-rules(map.get($ruleset, $breakpoint));

        @include _ct-typography-print-css-variables($breakpoint, $name, $breakpoint-ruleset);
      }
    }
  }

  @each $name, $value in meta.module-variables('variables') {
    // Only filter by CivicTheme variables.
    @if str-index($name, 'ct-') {
      // Only filter by variable names related to color or opacity.
      @if str-index($name, 'color') or str-index($name, 'opacity') {
        // Only filter by color or string variables.
        @if type-of($value) == 'color' or type-of($value) == 'number' or type-of($value) == 'string' {
          --#{$name}: #{$value};
        }
      }
    }
  }
}
