{#
/**
 * @file
 * CivicTheme Field component.
 *
 * Variables:
 * - theme: [string] Theme variation (light or dark).
 * - type: [string] Type defined by a control type (required).
 * - title: [string] Field title.
 * - title_display: [string] How to display the field title (visible, invisible, hidden).
 * - label: [string] Control label (required only for a radio group or checkbox).
 * - description: [string] Field description.
 * - name: [string] Control DOM name (propagated from `name` if not defined).
 * - value: [string] Control DOM value (propagated from `value` if not defined).
 * - id: [string] Control DOM ID.
 * - is_invalid: [boolean] Whether the control is invalid (propagated from `is_invalid` if not defined).
 * - is_disabled: [boolean] Whether the control is disabled (propagated from `is_disabled` if not defined).
 * - is_required: [boolean] Whether the control is required (propagated from `is_required` if not defined).
 * - required_text: [string] Text to display within label element when required (propagated).
 * - orientation: [string] Elements orientation (vertical or horizontal).
 * - is_inline: [boolean] Whether the complex control is shown inline.
 * - control: [object,array] Object or objects collection with control's properties (required for complex controls).
 * - options: [array] Options for the field input:
 *   Each item contains:
 *   - label: [string] Option label text.
 *   - value: [string] Option value.
 * - is_multiple: [boolean] Whether the field allows multiple values.
 * - placeholder: [string] Placeholder text for field.
 * - message: [object] Message object for showing messages:
 *   - content: [string] Message content.
 *   - attributes: [string] Additional HTML attributes.
 * - prefix: [string] Content to add before the field.
 * - suffix: [string] Content to add after the field.
 * - attributes: [string] Additional HTML attributes.
 * - modifier_class: [string] Additional CSS classes.
 */
#}

{% set type = type|default('hidden') %}
{% set title_display = title_display in ['visible', 'invisible', 'hidden'] ? title_display : 'visible' %}
{% set is_invalid = is_invalid ? is_invalid : false %}
{% set is_disabled = is_disabled ? is_disabled : false %}
{% set is_required = is_required ? is_required : false %}
{% set orientation = orientation in ['vertical', 'horizontal'] ? orientation : 'vertical' %}
{% set theme_class = 'ct-theme-%s'|format(theme|default('light')) %}
{% set type_class = 'ct-field--%s'|format(type) %}
{% set is_required_class = is_required ? 'ct-field--required' : '' %}
{% set is_disabled_class = is_disabled ? 'ct-field--disabled' : '' %}
{% set is_invalid_class = is_invalid ? 'ct-field--invalid' : '' %}
{% set orientation_class = 'ct-field--%s'|format(orientation) %}
{% set modifier_class = '%s %s %s %s %s %s %s'|format(theme_class, type_class, orientation_class, is_required_class, is_disabled_class, is_invalid_class, modifier_class|default('')) %}

{# Initialise empty control and convert to an array. #}
{% if not control or control is not iterable %}
	{% set control = [{name: name}] %}
{% else %}
	{% set first_key = control|keys|first %}
	{% set control = first_key and first_key matches '/^[0-9]+$/' ? control : [control] %}
{% endif %}

{% set _controls = [] %}
{% for c in control %}
	{% set control_multiple = c.is_multiple ? c.is_multiple : false %}
	{% set default_multiple = is_multiple ? is_multiple : false %}
	{% set field_is_multiple = control_multiple ? control_multiple : default_multiple %}
	{% set c = {
		theme: c.theme|default(theme),
		label: c.label|default(title),
		name: c.name|default(name),
		value: c.value|default(value),
		id: c.id|default(id),
		options: c.options|default(options|default([])),
		is_multiple: field_is_multiple,
		placeholder: placeholder|default(''),
		is_required: c.is_required|default(is_required),
		required_text: c.required_text|default(required_text),
		is_invalid: is_invalid,
		is_disabled: c.is_disabled|default(is_disabled),
		is_checked: c.is_checked ? c.is_checked : false,
		attributes: c.attributes|default(''),
		modifier_class: c.modifier_class ? 'ct-field__control ' ~ c.modifier_class : 'ct-field__control',
	} %}
	{% set _controls = _controls|merge([c]) %}
{% endfor %}
{% set control = _controls %}

{% if control[0].name %}
	<div class="ct-field {{ modifier_class -}}" {% if attributes %}{{- attributes|raw -}}{% endif %}>
		{% if title and title_display != 'hidden' and type != 'hidden' %}
			{% include 'civictheme:label' with {
				theme: theme,
				content: label|default(title),
				is_required: is_required,
				required_text: required_text,
				for: control[0].id and type not in ['radio', 'checkbox'] ? control[0].id : null,
				modifier_class: 'ct-field__title' ~ (title_display == 'invisible' ? ' ct-visually-hidden' : ''),
			} only %}
		{% endif %}

		<div class="ct-field__wrapper">
			{% if description and type != 'hidden' %}
				{% set error_message = label ? 'Field <em>' ~ label ~ '</em> has an error' : 'Field has an error' %}
				{% set invalid_content = is_invalid ? error_message : null %}
				{% set desc_content = description ? description : invalid_content %}
				{% include 'civictheme:field-description' with {
					theme: theme,
					content: desc_content,
					allow_html: true,
					modifier_class: 'ct-field__description',
				} only %}
			{% endif %}

			{% if prefix %}
				<div class="ct-field__prefix">{{- prefix|raw -}}</div>
			{% endif %}

			{% if type == 'textfield' %}
				{% include 'civictheme:textfield' with control[0] only %}

			{% elseif type == 'textarea' %}
				{% include 'civictheme:textarea' with control[0] only %}

			{% elseif type == 'select' %}
				{% include 'civictheme:select' with control[0] only %}

			{% elseif type == 'checkbox' or type == 'radio' %}

				{% set list_items = [] %}
				{% for item in control %}
					{% set list_item %}
						{% if type == 'checkbox' %}
							{% include 'civictheme:checkbox' with item only %}
						{% else %}
							{% include 'civictheme:radio' with item only %}
						{% endif %}
					{% endset %}
					{% set list_items = list_items|merge([list_item]) %}
				{% endfor %}
				{% include 'civictheme:item-list' with {
					direction: is_inline ? 'horizontal' : 'vertical',
					items: list_items,
				} only %}

			{% else %}
				{% set control0 = control[0] %}
				{% set control0 = control0|merge({'type': type}) %}
				{% include 'civictheme:input' with control0 only %}
			{% endif %}

			{% if suffix %}
				<div class="ct-field__suffix">{{- suffix|raw -}}</div>
			{% endif %}

			{% if (message or is_invalid) and type != 'hidden' %}
				{% set error_message = title ? 'Field <em>' ~ title ~ '</em> has an error' : 'Field has an error' %}
				{% set invalid_content = is_invalid ? error_message : null %}
				{% set message_content = message and message.content ? message.content : invalid_content %}
				{% include 'civictheme:field-message' with {
					theme: theme,
					type: is_invalid ? 'error' : 'information',
					content: message_content,
					allow_html: true,
					modifier_class: 'ct-field__message',
					attributes: message.attributes|default('')
				} only %}
			{% endif %}
		</div>
	</div>
{% endif %}
