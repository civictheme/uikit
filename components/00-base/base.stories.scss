//
// Base rules for Storybook stories.
//

@use 'sass:color';
@use 'sass:map';
@use 'sass:math';

// Set default styles for the Storybook viewport.
#root {
  font-family: sans-serif;
  padding: ct-spacing(2);

  // Storybook does not provide a simple way to add custom layouts to be
  // used in the story parameters, so we have to use our own decorator that
  // provides a wrapper around story with custom sizes.
  > .story-layout {
    $root: &;

    // Only apply wrappers used directly in preview, but not within other
    // components.
    &.story-layout-size--small {
      // Make the wrapper smaller than the mobile size to make sure any overflow
      // is visible on the screen.
      max-width: map.get($ct-breakpoints, 'xs') - ct-particle-px(4);

      @include ct-breakpoint(s) {
        max-width: map.get($ct-breakpoints, 's') - ct-particle-px(4);
      }
    }

    &.story-layout-size--medium {
      max-width: map.get($ct-breakpoints, 's');
    }

    &.story-layout-size--large {
      max-width: map.get($ct-breakpoints, 'xxl');
    }

    &.story-layout--centered {
      margin-left: auto;
      margin-right: auto;
    }

    &.story-layout--centered-both {
      margin-top: 30vh;
      margin-left: auto;
      margin-right: auto;
    }

    &.story-layout--resizable {
      border: solid ct-particle(0.125) yellowgreen;
      padding: ct-particle(2);
      width: 85vw;
      height: 95vh;
      resize: horizontal;
      overflow: auto;
    }

    &.story-layout--container {
      container-type: inline-size;
    }

    &.story-layout--resizable,
    &.story-layout--container {
      &.story-layout-size--small {
        max-width: initial;
        width: rem(map.get($ct-breakpoints, 'xs')) + ct-spacing(8);
      }

      &.story-layout-size--medium {
        max-width: initial;
        width: rem(map.get($ct-breakpoints, 's')) + ct-spacing(8);
      }

      &.story-layout-size--large {
        max-width: initial;
        width: rem(map.get($ct-breakpoints, 'xxl')) + ct-spacing(8);
      }
    }
  }

  > .story-docs {
    $root: &;

    border: solid ct-particle(0.125) #ccc;
    padding: ct-spacing(4);
    margin: ct-spacing(4) auto;
    max-width: 60%;
    text-align: center;

    &.story-docs-size--small {
      max-width: map.get($ct-breakpoints, 'xs');
    }

    &.story-docs-size--medium {
      max-width: map.get($ct-breakpoints, 's');
    }

    &.story-docs-size--large {
      margin: ct-spacing(8) auto;
      min-width: map.get($ct-breakpoints, 'xxl');
    }

    #{$root}__title {
      @include ct-typography('label-large');
    }

    #{$root}__content {
      margin-bottom: ct-spacing(4);
    }
  }
}

//
// Conditionally show docs if an element with a certain class follows the docs.
//
@mixin ct-story-docs-conditional($class) {
  .story-docs:has(+ #{$class}) {
    display: block;
  }

  .story-docs:not(:has(+ #{$class})) {
    display: none;
  }
}

.sb-show-main {
  overflow-y: scroll;

  &.sb-main-fullscreen,
  &.sb-main-centered {
    #root {
      padding: 0;
    }
  }
}

.story-slot {
  display: grid;
  align-items: center;
  background-color: color.adjust(purple, $alpha: -0.7);
  padding: 1em;
  text-align: center;
  font-family: sans-serif;
  font-size: 0.8em;
  border: dotted ct-particle(0.125) purple;
  white-space: nowrap;
  height: 100%;

  .ct-theme-dark & {
    background-color: color.adjust(white, $alpha: -0.7);
    border: dotted ct-particle(0.125) purple;
  }
}

.story-slot--image_over {
  position: absolute;
  top: 4em;
  left: 0;
  right: 0;
}

.story-placeholder,
.story-placeholder--hugged,
.story-placeholder--fixed {
  $_color: grey;

  display: inline-block;
  background-color: color.adjust($_color, $alpha: -0.7);
  padding-top: 1em;
  padding-bottom: 1em;
  text-align: center;
  font-family: sans-serif;
  border: dotted ct-particle(0.125) $_color;
  color: color.adjust($_color, $alpha: -0.1);

  .ct-theme-dark & {
    background-color: color.adjust($_color, $alpha: -0.7);
    border: dotted ct-particle(0.125) $_color;
    color: color.adjust($_color, $alpha: 0.1);
  }
}

.story-placeholder {
  width: 100%;
}

.story-placeholder--hugged {
  width: auto;
}

.story-placeholder--fixed {
  width: math.div(ct-breakpoint-next($ct-grid-lowest-breakpoint), 2);
}

.story-container {
  $root: &;

  margin-bottom: ct-spacing(4);

  #{$root}__title {
    @include ct-typography('label-large');

    border-bottom: solid ct-particle(0.125);
    margin-bottom: ct-spacing(4);
    margin-top: ct-spacing(2);

    &:first-child {
      margin-top: 0;
    }
  }

  #{$root}__subtitle {
    @include ct-typography('label-regular');

    margin-top: ct-spacing(3);
    margin-bottom: ct-spacing(2);
  }

  #{$root}__content {
    margin-bottom: ct-spacing(4);
  }

  #{$root}__subcontent {
    margin-bottom: ct-spacing(4);
  }

  &.story-layout--columns {
    display: flex;
  }

  &.story-layout--columns--2 {
    #{$root}__column {
      width: 50%;
      padding: ct-spacing(2);
    }
  }

  #{$root}__column {
    flex: 1;

    &--light {
      background: ct-color-light('background-light');

      #{$root}__title,
      #{$root}__subtitle {
        color: ct-color-light('heading');
      }

      #{$root}__content,
      #{$root}__subcontent {
        color: ct-color-light('body');
      }
    }

    &--dark {
      background: ct-color-dark('background');

      #{$root}__title,
      #{$root}__subtitle {
        color: ct-color-dark('heading');
      }

      #{$root}__content,
      #{$root}__subcontent {
        color: ct-color-dark('body');
      }
    }
  }

  code {
    background-color: #f5f5f5;
    border-radius: 4px;
    border: 1px solid #e1e1e8;
    color: #d63384;
    display: inline-block;
    font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;
    font-size: 0.9em;
    padding: 0 0.25em;
    vertical-align: top;
  }
}
